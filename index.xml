<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>汤福平的博客</title>
    <link>https://tangfuping.github.io/</link>
    <description>Recent content on 汤福平的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 20 Sep 2019 22:23:00 +0800</lastBuildDate>
    
	<atom:link href="https://tangfuping.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo &#43; GitHub搭建个人博客</title>
      <link>https://tangfuping.github.io/posts/hugo/</link>
      <pubDate>Fri, 20 Sep 2019 22:23:00 +0800</pubDate>
      
      <guid>https://tangfuping.github.io/posts/hugo/</guid>
      <description>预备工具  Git GitHub  一、下载Hugo  下载Hugo Releases下载对应版本的zip压缩文件。 下载后解压出来有一个hugo.exe，添加到Path环境变量（也可以直接将hugo.exe放入C:\Windows）。 打开cmd，运行hugo version，查看 hugo 是否安装成功以及相应的版本号。
二、开始搭建Hugo博客 进入Hugo官网，按着Quick Start开始搭建。
 创建一个站点：在cmd中进入一个空目录中，比如C:\Users\tang（cd c:\users\tang），运行下面命令创建站点
hugo new site myblog  3.选择一个博客主题，在官网中Themes下面选择一个主题，我的博客用的是m10c，在myblog文件夹中使用git下载主题
git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c  当然也可以不使用git，下载好后将主题放入C:\Users\tang\myblog\themes也行。 然后在config.toml文件（用记事本打开）最后面后添加下面代码：
theme = &amp;quot;m10c&amp;quot;  4.创建一篇博客：在cmd进入myblog中执行命令
hugo new posts/hello-world.md   此时，文章就创建在了 content 文件夹下的 posts 文件夹下了。在编辑好博客后，记得把文章头部的 draft 值改为 false，意思是这已经不是草稿了。 5.启动 Hugo 服务器 在cmd进入myblog目录中,运行下面命令
hugo server -D  复制得到的地址 http://localhost:1313/，在浏览器打开，即可访问到你创建的 Hugo 博客站点，当然，也可以浏览你写的博客这表明你的博客站点在本地上预览是 OK 的 6.构建静态页面：在cmd中执行
hugo  执行完后根目录就会多出一个名为 public 的目录，这就是我们博客站点的静态页面，但是我们不能通过双击的方式预览 public/index.</description>
    </item>
    
    <item>
      <title>Sort1</title>
      <link>https://tangfuping.github.io/posts/sort1/</link>
      <pubDate>Fri, 20 Sep 2019 20:15:35 +0800</pubDate>
      
      <guid>https://tangfuping.github.io/posts/sort1/</guid>
      <description>[TOC]
说明 习题1 栈 描述 实现一个栈，完成以下功能： * 入栈 * 出栈 * 询问栈中位置Y是谁
一开始栈为空，栈中位置从1开始（即栈底位置为1）
输入 第一行一个整数n，表示操作的个数。 接下来的n行，每一行第一个数字表示操作（见描述）： * 若为数字1，则接下来有一串字符串X，表示将X压入栈中； * 若为数字2，表示弹出栈顶（保证栈非空），并输出出栈的这个人； * 若为数字3，则接下来有一个整数Y，表示询问栈中位置Y是谁（保证位置Y合法），并输出名字。
输出 将所有操作2和操作3输出，一行一个。
输入样例 11 1 a 1 b 1 c 3 1 3 2 3 2 2 1 d 3 1 3 2 3 3  输出样例 a b c c a b d  解法一 数组模拟，将数组的右端当做栈顶。 每次操作时间复杂度均为O（1）
C++具体实现 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int N = 100005; // Stack:栈 // top:栈顶位置 string Stack[N]; int n, top; // 压入栈顶 // name:被压入的人的名字 void push(string name) { Stack[++top] = name; } // 弹出栈顶 // 返回值：被弹出人的姓名 string pop() { return Stack[top--]; } // 询问栈中某个位置上的人的姓名（栈底位置为1，向栈顶方向的位置依次递增） // pos:询问的位置 // 返回值：pos位置上人的姓名 string query(int pos) { return Stack[pos]; } int main(){ int n; scanf(&amp;quot;%d&amp;quot;, &amp;amp;n); char name[20]; for(; n--; ) { int op; scanf(&amp;quot;%d&amp;quot;, &amp;amp;op); if (op == 1) { scanf(&amp;quot;%s&amp;quot;, name); push(name); } else if (op == 2) { printf(&amp;quot;%s\n&amp;quot;, pop().</description>
    </item>
    
  </channel>
</rss>