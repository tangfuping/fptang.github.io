<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法基础 on 汤福平的博客</title>
    <link>https://tangfuping.github.io/tags/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 算法基础 on 汤福平的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 20 Sep 2019 20:15:35 +0800</lastBuildDate>
    
	<atom:link href="https://tangfuping.github.io/tags/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sort1</title>
      <link>https://tangfuping.github.io/posts/sort1/</link>
      <pubDate>Fri, 20 Sep 2019 20:15:35 +0800</pubDate>
      
      <guid>https://tangfuping.github.io/posts/sort1/</guid>
      <description>[TOC]
说明 习题1 栈 描述 实现一个栈，完成以下功能： * 入栈 * 出栈 * 询问栈中位置Y是谁
一开始栈为空，栈中位置从1开始（即栈底位置为1）
输入 第一行一个整数n，表示操作的个数。 接下来的n行，每一行第一个数字表示操作（见描述）： * 若为数字1，则接下来有一串字符串X，表示将X压入栈中； * 若为数字2，表示弹出栈顶（保证栈非空），并输出出栈的这个人； * 若为数字3，则接下来有一个整数Y，表示询问栈中位置Y是谁（保证位置Y合法），并输出名字。
输出 将所有操作2和操作3输出，一行一个。
输入样例 11 1 a 1 b 1 c 3 1 3 2 3 2 2 1 d 3 1 3 2 3 3  输出样例 a b c c a b d  解法一 数组模拟，将数组的右端当做栈顶。 每次操作时间复杂度均为O（1）
C++具体实现 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int N = 100005; // Stack:栈 // top:栈顶位置 string Stack[N]; int n, top; // 压入栈顶 // name:被压入的人的名字 void push(string name) { Stack[++top] = name; } // 弹出栈顶 // 返回值：被弹出人的姓名 string pop() { return Stack[top--]; } // 询问栈中某个位置上的人的姓名（栈底位置为1，向栈顶方向的位置依次递增） // pos:询问的位置 // 返回值：pos位置上人的姓名 string query(int pos) { return Stack[pos]; } int main(){ int n; scanf(&amp;quot;%d&amp;quot;, &amp;amp;n); char name[20]; for(; n--; ) { int op; scanf(&amp;quot;%d&amp;quot;, &amp;amp;op); if (op == 1) { scanf(&amp;quot;%s&amp;quot;, name); push(name); } else if (op == 2) { printf(&amp;quot;%s\n&amp;quot;, pop().</description>
    </item>
    
  </channel>
</rss>